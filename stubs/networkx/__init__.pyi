# pylint: skip-file

from typing import Generic, Iterable, Iterator, TypeVar, TypedDict

N = TypeVar("N")

WeightDict = TypedDict("WeightDict", {"weight": float})

class DegreesView(Generic[N]):
    def __getitem__(self, index: int) -> N: ...
    def __iter__(self) -> Iterator[tuple[N, int]]: ...
    def __len__(self) -> int: ...

class Graph(Generic[N]):
    def add_nodes_from(self, nodes_for_adding: Iterable[N]) -> None: ...
    def add_edges_from(self, edges_for_adding: Iterable[tuple[N, N, WeightDict]]) -> None: ...
    def degree(self) -> DegreesView[N]: ...

def equitable_color(G: Graph[N], num_colors: int) -> dict[N, int]: ...
